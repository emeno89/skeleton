package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"skeleton/shared/gqlutils"
	"skeleton/srv-gql/internal/api/graphql/graph/generated"
	"skeleton/srv-gql/internal/api/graphql/graph/loader"
	"skeleton/srv-gql/internal/api/graphql/graph/model"
	"skeleton/srv-gql/internal/api/locale"

	"github.com/nicksnyder/go-i18n/v2/i18n"
)

// Title is the resolver for the title field.
func (r *exampleItemResolver) Title(ctx context.Context, obj *model.ExampleItem) (string, error) {
	localizer := i18n.NewLocalizer(r.bundle, locale.FromIncomingContext(ctx))

	return ExampleTitle(localizer, obj.Id), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	usr, err := r.userService.CurrentUser(ctx)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:   usr.Id,
		Name: usr.Name,
	}, nil
}

// ExampleExternalItem is the resolver for the exampleExternalItem field.
func (r *queryResolver) ExampleExternalItem(ctx context.Context, id string) (*model.ExampleItem, error) {
	item, err := loader.FromIncomingContext(ctx).GetExampleItem(ctx, id)
	if err != nil {
		return nil, err
	}

	if item == nil {
		return nil, gqlutils.ErrNotFound(ctx)
	}

	return item, nil
}

// ExampleInternalItem is the resolver for the exampleInternalItem field.
func (r *queryResolver) ExampleInternalItem(ctx context.Context, id string) (*model.ExampleItem, error) {
	if id != "10" {
		return nil, gqlutils.ErrNotFound(ctx)
	}

	return &model.ExampleItem{
		Id: id,
	}, nil
}

// ExampleItem returns generated.ExampleItemResolver implementation.
func (r *Resolver) ExampleItem() generated.ExampleItemResolver { return &exampleItemResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type exampleItemResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
